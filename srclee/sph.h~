#include<list>

using namespace std;

class SphFluidSolver;

struct Particle;

// struct GridElement; 

#ifndef _SPH_H_
#define _SPH_H_

#include "Vector.h"

struct Particle {
	int id;
	float mass;
	float density;
	Vector2f position;
	Vector2f velocity;
	Vector2f force;
	
	Vector2f viscosity_force;
	Vector2f pressure_force;

//	Particle()
};

// struct FluidMaterial {

class SphFluidSolver {
	const float domain_width;
	cosnt float domain_height;
	const float hsml;  // smoothed length
	const float timestep;
	const float vsp //velocity of sound speed
//	const FluidMaterial
//	GridElement *grid_elements;
//	vsp = 10.0

	public:
SphFluidSolver( float domain_width, 
		float domain_height,
		float hsml;
		float timestep,
		//FluidMaterial)
        	)	{}

void update( void (*inter_hook) () = NULL, void(*post_hook)() = NULL);

void init_particles(Particle *particle, int count);

template <typename Function>
	void foreach_particle(Function function){
		list<Particle> &plist = particles;
		for(list<Particle>::iterator piter = plist.begin(); piter !=plist.end(); piter++){
			function(*piter);
		}
	}

float kernel(const Vector2f &r, const float h);

Vector2f gradient_kernel(const Vector2f &r, const float h);

float add_density(Particle &particle, Particle &neighbour);

void sum_density( Particle &particle);

//void sum_all_density(int i, int j, Particle &particle);

// void update_densities();

void add_forces(Particle &particle, Particle &neighbour);

void sum_forces(Particle &particle);

//void update_forces();

void update_particle(Particle &particle);

void update_particles();

void reset_particle(Particle &particle);

void reset_particles():
#endif


